variables:
  GIT_DEPTH: 10
  GIT_SSL_NO_VERIFY: 1

stages:
  - update_oscap
  - update_ssg
  - scan

default:
  image:
    name: debian:11
    pull_policy: if-not-present
  tags:
    - docker

# include:
#   - local: build_dependencies/oscap.yml
#   - local: build_dependencies/ssg.yml

run-security-scan:
  image:
    name: theohbrothers/docker-ansible:v2.10.7-alpine-3.13
    pull_policy: if-not-present
  stage: scan
  before_script:
    - mkdir -p ~/.ssh
    - cp -f "$SSH_PRIVATE_KEY" ~/.ssh/id_rsa
    - chmod 400 ~/.ssh/id_rsa
    - rm -f ~/.ssh/known_hosts
    - cp "$DEBUG" playbooks/security-scan/roles/openscap/tasks/install.yml
    - mkdir -p /etc/ansible/
    - cp -f "$ANSIBLE_CFG" /etc/ansible/ansible.cfg
    - cp -f "$ANSIBLE_INVENTORY" inventory
  script:
    - cat playbooks/security-scan/roles/openscap/tasks/install.yml
    - cat inventory
    - cat /etc/ansible/ansible.cfg
    # - apk update
    # - apk add curl git

    # # Check for oscap version
    # - openscap_version=$(curl --silent "https://api.github.com/repos/OpenSCAP/openscap/releases/latest" | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/')
    # - current_oscap_version=$(git -c 'versionsort.suffix=-' ls-remote --refs --sort='version:refname' --tags https://oauth2:$OSCAP_ACCESS_TOKEN@gitlab.example.com/root/oscap.git '*.*.*' | tail -n 1 | cut -d '/' -f 3 | sed -E "s/v//")
    # - 'if [ "$openscap_version" != "$current_oscap_version" ]; then
    #   echo "New version of OpenSCAP is available: $openscap_version.";
    #   echo "Update before scanning";
    #   exit 1;
    #   fi'
    # - echo "Run security scan"

    # # Check for ssg version
    # - ssg_version=$(curl --silent "https://api.github.com/repos/ComplianceAsCode/content/releases/latest" | grep '"tag_name":' | sed -E 's/.*"v([^"]+)".*/\1/')
    # - current_ssg_version=$(git -c 'versionsort.suffix=-' ls-remote --refs --sort='version:refname' --tags https://oauth2:$SSG_ACCESS_TOKEN@gitlab.example.com/root/ssg.git '*.*.*' | tail -n 1 | cut -d '/' -f 3 | sed -E "s/v//")
    # - 'if [ "$ssg_version" != "$current_ssg_version" ]; then
    #   echo "New version of SSG is available: $ssg_version.";
    #   echo "Update before scanning";
    #   exit 1;
    #   fi'

    # - git clone -b "v${ssg_version}" --depth 1 https://oauth2:$SSG_ACCESS_TOKEN@gitlab.example.com/root/ssg.git
    - ls -la
    - ansible-config dump
    - ansible-config view
    - ansible-playbook playbooks/security-scan/main.yml
# run-security-scan:
#   stage: scan
#   # tags:
#   #   - shell
#   before_script:
#     - mkdir -p ~/.ssh
#     - cp -f "$SSH_PRIVATE_KEY" ~/.ssh/id_rsa
#     - chmod 400 ~/.ssh/id_rsa
#     # - rm -f ~/.ssh/known_hosts
#   needs: ["trigger_oscap"]
#   script:
#     - ansible-playbook playbooks/security-scan/main.yml
#   artifacts:
#     paths:
#       - reports
# after_script:
#   - rm ~/.ssh/id_rsa
